

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.util.Scanner;

public class MultiKnapsack {
	static long count=0;


	static int printknapSack(int kapasite, int weights[], int values[], int itemSize, int index[][], int a) {
		int i, j;
		int k = 0;
		int V[][] = new int[itemSize + 1][kapasite + 1];
		// building table K[][] in bottom up manner

		for (i = 0; i <= itemSize; i++) {
			for (j = 0; j <= kapasite; j++) {
				count++;
				if (i == 0 || j == 0)// first row and first column of the array
					// of K should be 0.
					V[i][j] = 0;
				else if (weights[i - 1] <= j) // value at index of the array which
					// contains weights should be less
					// or equal to j.
					V[i][j] = Math.max(values[i - 1] + V[i - 1][j - weights[i - 1]], V[i - 1][j]);
				else
					V[i][j] = V[i - 1][j];// this else statement prints the
				// value in the top row to the
				// bottom row.
			}
		}

		// stores the result of Knapsack
		int res = V[itemSize][kapasite];
		int hello = res;

		// itemlerin olup olmadigini bakiyoruz
		j = kapasite;
		for (i = itemSize; i > 0 && res > 0; i--) {

			// either the result comes from the top
			// (V[i-1][j]) or from (values[i-1] + V[i-1] [j-weights[i-1]]) as in table. If  it comes from the latter one it means
			// the item is included.
			if (res == V[i - 1][j]) {
				index[k][a] = 0;
				k++;
				continue;
			}

			else {
				// This item is included.
				index[k][a] = 1;
				k++;
				// Since this weight is included its
				// value is deducted
				res = res - values[i - 1];
				j = j - weights[i - 1];
			}
		}
		return hello;
	}

	static int max(int a, int b) {
		return (a > b) ? a : b;
	}

	public static void main(String[] args) throws FileNotFoundException {
		
		int n = 0; //number of items
		int W = 0;//number of capacities.
		

		File file = new File("C:\\Users\\furkan\\Desktop\\2ler\\test2.dat");// This program takes input from a
		// dat file.

		String[] sayilar2 = new String[2];
		Scanner input = new Scanner(file);
		int i = 0;

		String line = input.nextLine();
		sayilar2 = line.split(" ");// This line just takes the first line
		// of the text as an input to define
		// number of items and number of capacities.
		
		n = Integer.parseInt(sayilar2[0]);  
		W = Integer.parseInt(sayilar2[1]);

		int kapasiteler[] = new int[W];
		int wt[] = new int[n];
		int val[] = new int[n];
		i++;

		while (input.hasNext()) {// This loop takes inputs line by line from
			// the text.
			line = input.nextLine();
	
			sayilar2 = line.split(" ");

			if (i == 1) {
				int j;
				for (j = 1; j <= W; j++) {  //taking capacities
					kapasiteler[j - 1] = Integer.parseInt(sayilar2[j - 1]);
					if (j == W)
						i++;
				}
				continue;
			}

			val[i - 2] = Integer.parseInt(sayilar2[0]); //taking values of items.
			wt[i - 2] = Integer.parseInt(sayilar2[1]); //taking weights of items.

			i++;
		}

		int arr[][] = new int[n][W];
		FileWriter fWriter = null;
		BufferedWriter writer = null;
		int j;
		int total = 0;
		try {
			File out = new File("C:\\Users\\furkan\\Desktop\\output2.dat");//for writing outputs.
			fWriter = new FileWriter(out);
			writer = new BufferedWriter(fWriter);

			for (i = 0; i < W; i++) {
				count++;
				total += printknapSack(kapasiteler[i], wt, val, n, arr, i);

				for (j = 0; j < n; j++) {
					if (arr[n - j - 1][i] == 1)
						val[j] = 0;
				}

			}
			writer.write(total + "");//total value in knapsack.
			
			for (i = n - 1; i >= 0; i--) {//this loop for writing zeros and ones.
				writer.newLine();
				for (j = 0; j < W; j++)
					writer.write(arr[i][j] + " ");

			}

			writer.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		input.close();
	
		System.out.println("total count : "+count);
	}

}
